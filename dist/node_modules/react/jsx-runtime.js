(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-runtime"] = global["jsx-runtime"] || {}, global["jsx-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const supportSysmbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSysmbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'Paul'
	    };
	    return element;
	};
	const jsx = function (type, config, ...maybeChildren) {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const k in config) {
	        const v = config[k];
	        if (k === 'key') {
	            if (v !== undefined) {
	                key += '' + k;
	            }
	            continue;
	        }
	        if (k === 'ref') {
	            if (v !== undefined) {
	                ref = v;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, k)) {
	            props[k] = v;
	        }
	    }
	    props.children =
	        maybeChildren?.length === 1 ? maybeChildren[0] : maybeChildren;
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
